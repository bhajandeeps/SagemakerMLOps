---
  AWSTemplateFormatVersion: 2010-09-09
  Description: AWS Step Functions sample project for training a model and performing a batch transform task.
  Parameters:
    stackName:
      Description: >-
          Enter instance type for preprocessing default value is ml.m5.large
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'Wi-MLOPS-ModelMonitor'
    PreProcessingInstanceType:
      Description: >-
          Enter instance type for preprocessing default value is ml.m5.large
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'ml.m5.large'
    ConfigS3Bucket:
      Description: >-
          S3 bucket for config file location
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'wi-cred-datalake-dev-s3-mlops-config'
    DataS3Bucket:
      Description: >-
          S3 bucket for data location
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'wi-cred-datalake-dev-raw'
    CodeLocation:
      Description: >-
          Enter prefix for code  location
      Type: 'String'
      MinLength: 5
      MaxLength: 1000
      Default: 'vehicle/usedcars/monitoring/inbound/code'
    
    PrefixDriftLambda:
      Description: >-
          Enter prefix for drift lambda
      Type: 'String'
      MinLength: 5
      MaxLength: 1000
      Default: 'evaluate_monitor_datadrift.zip'
    
    PrefixEvalLambda:
      Description: >-
          Enter prefix for evaluate lambda
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'evaluatemonitor_payload.zip'
    PrefixJsonlPath:
      Description: >-
          Enter value of S3 path for JSONL input location
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'vehicle/usedcars/monitoring/inbound/batch/'
    RTPrefixJsonlPath:
      Description: >-
          Enter value of S3 path for JSONL input location
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'vehicle/usedcars/monitoring/inbound/realtime/'
    BaselineS3Prefix:
        Description: >-
            Enter monitoring constrain and stat file location
        Type: 'String'
        MinLength: 5
        MaxLength: 100
        Default: 'vehicle/usedcars/monitoring/inbound/baseline'
    PrefixReportPath:
      Description: >-
          Enter value of S3 for monitoring csv output location
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'vehicle/usedcars/reporting/datadrift/batch/'
    DriftReportPath:
      Description: >-
          Enter value of S3 for monitoring csv output location
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'vehicle/usedcars/reporting/datadrift/'  
    RTPrefixReportPath:
      Description: >-
          Enter value of S3 for monitoring csv output location
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'vehicle/usedcars/reporting/datadrift/realtime/'
    DataDriftTable:
      Description: >-
          Enter value of data drift athena table name
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'datadrift'
    ScoringDataTable:
      Description: >-
          Enter value of data drift athena table name
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'scoringtable'
    BaselineDataTable:
      Description: >-
          Enter value of data drift athena table name
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'baselineref'
    ScoreMonitorBridgeTable:
      Description: >-
          Enter value of data drift athena table name
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'scoremonitorbridge'           
    PrefixViolationPath:
      Description: >-
          Enter value of S3 for monitoring output location
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'vehicle/usedcars/monitoring/outbound/datadrift/batch/'
    RTPrefixViolationPath:
      Description: >-
          Enter value of S3 for monitoring output location
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'vehicle/usedcars/monitoring/outbound/datadrift/realtime/'  
    PrefixPostProcCodeLL:
      Description: >-
          Enter prefix for CSV to JSONL conversion script
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'score_ll_post_processing_script.py'
    PrefixPostProcCodeXGB:
      Description: >-
          Enter prefix for CSV to JSONL conversion script
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'score_xgb_post_processing_script.py'    
    PrefixGlueCode:
      Description: >-
          Enter prefix for S3 bookmark inc data processing
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'Glue_bookmarkScript.py'
    RTPrefixGlueCode:
      Description: >-
          Enter prefix for S3 bookmark for tral time inc data processing
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'RT_Glue_bookmarkScript.py'

    GlueS3Source:
      Description: >-
          Enter value of S3 path for Glue data source location, this is scoring output location
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'vehicle/usedcars/scoring/outbound/batch/'
    GlueS3Dest:
      Description: >-
          Enter value of S3 path for Glue Destination
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'vehicle/usedcars/monitoring/inbound/currentrun/batch/'
    RTGlueS3Source:
      Description: >-
          Enter value of S3 path for Glue data source location, this is scoring output location
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'transformed/scoring/outbound/realtime/'
    RTGlueS3Dest:
      Description: >-
          Enter value of S3 path for Glue Destination
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'vehicle/usedcars/monitoring/inbound/currentrun/realtime'
    RTReportPath:
      Description: >-
          Enter value of S3 path for Glue Destination
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'transformed/scoring/outbound/realtimeReport/'
    BslineReportPath:
      Description: >-
          Enter value of S3 path for Glue Destination
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'transformed/scoring/baselineReport/'  
    InferReportPath:
      Description: >-
          Enter value of S3 path for Glue Destination
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'transformed/scoring/outbound/'
    Scoremonitorbridgepath:
      Description: >-
          Enter value of S3 path for Glue Destination
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'transformed/monitoring/reporting/scoremonitortriage/'     
    InpGroundTruth:
      Description: >-
          Enter value of S3 path for Glue Destination
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'transformed/monitoring/inbound/inpgroundtruth/'     
    OpGroundTruth:
      Description: >-
          Enter value of S3 path for Glue Destination
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'transformed/monitoring/inbound/currentrun/groundtruth/'
    InpMergedGroundTruth:
      Description: >-
          Enter value of S3 path for Glue Destination
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'transformed/monitoring/inbound/groundtruthmerge/'           
    GlueTempDir:
      Description: >-
          Enter value of S3 path for Glue Destination
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'vehicle/usedcars/monitoring/inbound/gluetempdir/'      
    Schedulefreq:
      Description: >-
          Enter value of event scheduler freq
      Type: 'String'
      MinLength: 5
      MaxLength: 100
      Default: 'rate(1 hour)'  
    Subnet1:
      Description: >-
          Enter name of Subnet 1
      Type: 'String'
      MinLength: 1
      MaxLength: 1000
      Default: 'subnet-0156b7f5500cf0b78'
    Subnet2:
      Description: >-
          Enter name of subnet 2
      Type: 'String'
      MinLength: 1
      MaxLength: 1000
      Default: 'subnet-0156b7f5500cf0b78'
    Subnet3:
      Description: >-
          Enter name of Subnet 3
      Type: 'String'
      MinLength: 1
      MaxLength: 1000
      Default: 'subnet-0156b7f5500cf0b78'
    SecurityGroup:
      Description: >-
          Enter name of Security Group
      Type: 'String'
      MinLength: 1
      MaxLength: 1000
      Default: 'sg-044e0e7ce4f5721c0'
    TagTeam:
      Description: >-
          Random character for CFN
      Type: 'String'
      MinLength: 1
      MaxLength: 1000
      Default: 'itdna'
    TagProduct:
      Description: >-
          Random character for CFN
      Type: 'String'
      MinLength: 1
      MaxLength: 1000
      Default: 'dl'
    TagTenant:
      Description: >-
          Random character for CFN
      Type: 'String'
      MinLength: 1
      MaxLength: 1000
      Default: 'WI-cred-datalake' 
    RandomString:
      Description: >-
          Random character for CFN
      Type: 'String'
      MinLength: 1
      MaxLength: 1000
      Default: '9XF2'
    Environment:
      Description: >-
          Random character for CFN
      Type: 'String'
      MinLength: 1
      MaxLength: 1000
      Default: 'init'
    NotifierEmail: 
      Description: >-
          Report prefix location
      Type: 'String'
      MinLength: 1
      MaxLength: 1000
      Default: 'bhajandeep.singh@wipro.com'
    KMSKeyID:
      Description: >-
          Default KMS Key ID
      Type: 'String'
      MinLength: 1
      MaxLength: 1000
      Default: 'key/6e46ef2c-3be2-45ac-a9d6-f697c56201ce'
  Resources:
    LLModelMonitorSFN:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        RoleArn: !GetAtt [ SFNIAMRole, Arn ]
        StateMachineName: !Join [ "-", [!Ref AWS::StackName, "LLModelMonitorSFN", !Ref RandomString]] 
        DefinitionString:
          !Sub
            - |-
              {
                  "StartAt": "CSV Consolidation",
                  "States": {
                      "CSV Consolidation": {
                          "Parameters": {
                              "JobName": "${GlueJobs3Bookmark}",
                              "Arguments": {
                                  "--S3_SOURCE": "s3://${DataS3Bucket}/${GlueS3Source}/ll/",
                                  "--S3_DEST": "s3://${DataS3Bucket}/${GlueS3Dest}/ll/",
                                  "--src_context":"LL_src_context",
                                  "--tgt_context":"LL_tgt_context"
                              }
                          },
                          "Resource": "arn:aws:states:::glue:startJobRun.sync",
                          "Type": "Task",
                          "Next": "Evaluate Payload"
                      },
                      "Evaluate Payload": {
                          "Parameters": {
                              "FunctionName": "${EvaluatePayloadlambda}",
                              "Payload": {
                               "payload_src.$": "$$.Execution.Input['payload_src']",
                               "call_source":"Batch",
                               "inpgroundtruth.$": "$$.Execution.Input['inpgroundtruth']",
                               "opgroundtruth.$": "$$.Execution.Input['opgroundtruth']"
                                }
                          },
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Type": "Task",
                          "Next": "Monitor Payload Present"
                      },
                      "Monitor Payload Present": {
                          "Type": "Choice",
                          "Choices": [
                              {
                                  "Variable": "$['Payload']['flag']",
                                  "NumericEquals": 1,
                                  "Next": "Post-processing"
                              }
                          ],
                          "Default": "Bypass-No data file to process"
                      },
                      "Bypass-No data file to process": {
                          "Comment": "No Data file to process",
                          "Type": "Pass",
                          "End": true
                      },
                      "Post-processing": {
                          "Resource": "arn:aws:states:::sagemaker:createProcessingJob.sync",
                          "Parameters": {
                              "ProcessingJobName.$": "$$.Execution.Input['Post-processing']",
                              "ProcessingInputs": [
                                  {
                                      "InputName": "input",
                                      "AppManaged": false,
                                      "S3Input": {
                                          "S3Uri": "s3://${DataS3Bucket}/${GlueS3Dest}/ll/",
                                          "LocalPath": "/opt/ml/processing/input/data",
                                          "S3DataType": "S3Prefix",
                                          "S3InputMode": "File",
                                          "S3DataDistributionType": "FullyReplicated",
                                          "S3CompressionType": "None"
                                      }
                                  },
                                  {
                                      "InputName": "code",
                                      "AppManaged": false,
                                      "S3Input": {
                                          "S3Uri": "s3://${DataS3Bucket}/${CodeLocation}/${PrefixPostProcCodeLL}",
                                          "LocalPath": "/opt/ml/processing/input/code",
                                          "S3DataType": "S3Prefix",
                                          "S3InputMode": "File",
                                          "S3DataDistributionType": "FullyReplicated",
                                          "S3CompressionType": "None"
                                      }
                                  }
                              ],
                              "ProcessingOutputConfig": {
                                  "Outputs": [
                                      {
                                          "OutputName": "ll_data",
                                          "AppManaged": false,
                                          "S3Output": {
                                              "S3Uri.$": "$$.Execution.Input['ll_jsonlinppath']",
                                              "LocalPath": "/opt/ml/processing/ll",
                                              "S3UploadMode": "EndOfJob"
                                          }
                                      }
                                  ]
                              },
                              "AppSpecification": {
                                  "ImageUri": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-scikit-learn:0.20.0-cpu-py3",
                                  "ContainerEntrypoint": [
                                      "python3",
                                      "/opt/ml/processing/input/code/${PrefixPostProcCodeLL}"
                                  ]
                              },
                              "RoleArn": "${SageMakerIAMRole}",
                              "ProcessingResources": {
                                  "ClusterConfig": {
                                      "InstanceCount": 1,
                                      "InstanceType":"${PreProcessingInstanceType}",
                                      "VolumeSizeInGB": 30
                                  }
                              }
                          },
                          "Type": "Task",
                          "Next": "Batch Monitoring",
                          "Retry": [ {
                             "ErrorEquals": [ "SageMaker.AmazonSageMakerException" ],
                             "IntervalSeconds": 20,
                             "MaxAttempts": 3,
                             "BackoffRate": 1
                             } ]
                      },
                      "Batch Monitoring": {
                          "Resource": "arn:aws:states:::sagemaker:createProcessingJob.sync",
                          "Parameters": {
                              "ProcessingJobName.$": "$$.Execution.Input['MonitorJobName']",
                              "ProcessingInputs": [
                                  {
                                      "InputName": "input_1",
                                      "AppManaged": false,
                                      "S3Input": {
                                          "S3Uri.$": "$$.Execution.Input['ll_jsonlinppath']",
                                          "LocalPath.$": "$$.Execution.Input['monitorlocalpath']",
                                          "S3DataType": "S3Prefix",
                                          "S3InputMode": "File",
                                          "S3DataDistributionType": "FullyReplicated",
                                          "S3CompressionType": "None"
                                      }
                                  },
                                  {
                                      "InputName": "baseline",
                                      "AppManaged": false,
                                      "S3Input": {
                                          "S3Uri":"s3://${ConfigS3Bucket}/${BaselineS3Prefix}/statistics.json",
                                          "LocalPath": "/opt/ml/processing/baseline/stats",
                                          "S3DataType": "S3Prefix",
                                          "S3InputMode": "File",
                                          "S3DataDistributionType": "FullyReplicated",
                                          "S3CompressionType": "None"
                                      }
                                  },
                                  {
                                      "InputName": "constraints",
                                      "AppManaged": false,
                                      "S3Input": {
                                          "S3Uri": "s3://${ConfigS3Bucket}/${BaselineS3Prefix}/constraints.json",
                                          "LocalPath": "/opt/ml/processing/baseline/constraints",
                                          "S3DataType": "S3Prefix",
                                          "S3InputMode": "File",
                                          "S3DataDistributionType": "FullyReplicated",
                                          "S3CompressionType": "None"
                                      }
                                  }
                              ],
                              "ProcessingOutputConfig": {
                                  "Outputs": [
                                      {
                                          "OutputName": "result",
                                          "AppManaged": false,
                                          "S3Output": {
                                              "S3Uri.$":"$$.Execution.Input['ll_monitoroppath']",
                                              "LocalPath": "/opt/ml/processing/output",
                                              "S3UploadMode": "EndOfJob"
                                          }
                                      }
                                  ]
                              },
                              "AppSpecification": {
                                  "ImageUri": "156813124566.dkr.ecr.us-east-1.amazonaws.com/sagemaker-model-monitor-analyzer"
                              },
                              "RoleArn": "${SageMakerIAMRole}",
                              "Environment": {
                                  "baseline_constraints": "/opt/ml/processing/baseline/constraints/constraints.json",
                                  "baseline_statistics": "/opt/ml/processing/baseline/stats/statistics.json",
                                  "dataset_format": "{\"sagemakerCaptureJson\":{\"captureIndexNames\":[\"endpointInput\",\"endpointOutput\"]}}",
                                  "dataset_source": "/opt/ml/processing/input/endpoint",
                                  "start_time.$": "$$.Execution.Input['start_time']",
                                  "end_time.$": "$$.Execution.Input['end_time']",
                                  "metric_time.$": "$$.Execution.Input['metric_time']",
                                  "output_path": "/opt/ml/processing/output",
                                  "publish_cloudwatch_metrics": "Disabled",
                                  "sagemaker_endpoint_name": "poc",
                                  "sagemaker_monitoring_schedule_name": "poc"
                              },
                              "ProcessingResources": {
                                  "ClusterConfig": {
                                      "InstanceCount": 1,
                                      "InstanceType": "${PreProcessingInstanceType}",
                                      "VolumeSizeInGB": 30
                                  }
                              },
                              "StoppingCondition": {
                                  "MaxRuntimeInSeconds": 3600
                              }
                          },
                          "Type": "Task",
                          "Next": "Evaluate Drift",
                          "Retry": [ {
                             "ErrorEquals": [ "SageMaker.AmazonSageMakerException" ],
                             "IntervalSeconds": 20,
                             "MaxAttempts": 3,
                             "BackoffRate": 1
                             } ]
                      },
                      "Evaluate Drift": {
                          "Parameters": {
                              "FunctionName": "${EvaluateDrift}",
                              "Payload": {
                               "monitoropkey.$": "$$.Execution.Input['ll_monitoropkey']",
                               "notif_sub.$": "$$.Execution.Input['notif_sub']",
                               "modelname.$": "$$.Execution.Input['modelname']",
                               "reportopkey.$": "$$.Execution.Input['reportopkey']",
                               "starttime.$": "$$.Execution.Input['start_time']",
                               "endtime.$": "$$.Execution.Input['end_time']",
                               "inpjsonline.$": "$$.Execution.Input['ll_jsonlinppath']",
                               "outjsonpath.$": "$$.Execution.Input['ll_monitoroppath']",
                               "MonitorJobName.$":  "$$.Execution.Input['MonitorJobName']",
                               "baselinestat.$":"$$.Execution.Input['baselinestat']",
                               "baselinecons.$":"$$.Execution.Input['baselinecons']",
                               "infertype.$":"$$.Execution.Input['infertype']",
                               "payload_src.$":"$$.Execution.Input['payload_src']",
                               "mtrrefpath.$":"$$.Execution.Input['mtrrefpath']"
                                }
                          },
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Type": "Task",
                          "End": true
                      }
                  }
              }
            - {GlueJobs3Bookmark: !Ref GlueJobs3Bookmark, EvaluateDrift: !Ref EvaluateDrift,EvaluatePayloadlambda: !Ref EvaluatePayloadlambda,SageMakerIAMRole: !GetAtt SageMakerIAMRole.Arn, Subnet1: !Ref Subnet1, Subnet2: !Ref Subnet2, Subnet3: !Ref Subnet3, SecurityGroup: !Ref SecurityGroup}
    
        Tags:
          -
            Key: "vci:team"
            Value: !Ref TagTeam
          -
            Key: "vci:product"
            Value: !Ref TagProduct
          -
            Key: "tenant"
            Value: !Ref TagTenant
          -
            Key: "env"
            Value: !Ref Environment
    XGBModelMonitorSFN:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        RoleArn: !GetAtt [ SFNIAMRole, Arn ]
        StateMachineName: !Join [ "-", [!Ref AWS::StackName, "XGBModelMonitorSFN", !Ref RandomString]] 
        DefinitionString:
          !Sub
            - |-
              {
                  "StartAt": "CSV Consolidation",
                  "States": {
                      "CSV Consolidation": {
                          "Parameters": {
                              "JobName": "${GlueJobs3Bookmark}",
                              "Arguments": {
                                  "--S3_SOURCE": "s3://${DataS3Bucket}/${GlueS3Source}/xg/",
                                  "--S3_DEST": "s3://${DataS3Bucket}/${GlueS3Dest}/xg/",
                                  "--src_context":"xg_src_context",
                                  "--tgt_context":"xg_tgt_context"
                              }
                          },
                          "Resource": "arn:aws:states:::glue:startJobRun.sync",
                          "Type": "Task",
                          "Next": "Evaluate Payload"
                      },
                      "Evaluate Payload": {
                          "Parameters": {
                              "FunctionName": "${EvaluatePayloadlambda}",
                              "Payload": {
                               "payload_src.$": "$$.Execution.Input['payload_src']",
                               "call_source":"Batch",
                               "inpgroundtruth.$": "$$.Execution.Input['inpgroundtruth']",
                               "opgroundtruth.$": "$$.Execution.Input['opgroundtruth']"
                                }
                          },
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Type": "Task",
                          "Next": "Monitor Payload Present"
                      },
                      "Monitor Payload Present": {
                          "Type": "Choice",
                          "Choices": [
                              {
                                  "Variable": "$['Payload']['flag']",
                                  "NumericEquals": 1,
                                  "Next": "Post-processing"
                              }
                          ],
                          "Default": "Bypass-No data file to process"
                      },
                      "Bypass-No data file to process": {
                          "Comment": "No Data file to process",
                          "Type": "Pass",
                          "End": true
                      },
                      "Post-processing": {
                          "Resource": "arn:aws:states:::sagemaker:createProcessingJob.sync",
                          "Parameters": {
                              "ProcessingJobName.$": "$$.Execution.Input['Post-processing']",
                              "ProcessingInputs": [
                                  {
                                      "InputName": "input",
                                      "AppManaged": false,
                                      "S3Input": {
                                          "S3Uri": "s3://${DataS3Bucket}/${GlueS3Dest}/xg/",
                                          "LocalPath": "/opt/ml/processing/input/data",
                                          "S3DataType": "S3Prefix",
                                          "S3InputMode": "File",
                                          "S3DataDistributionType": "FullyReplicated",
                                          "S3CompressionType": "None"
                                      }
                                  },
                                  {
                                      "InputName": "code",
                                      "AppManaged": false,
                                      "S3Input": {
                                          "S3Uri": "s3://${DataS3Bucket}/${CodeLocation}/${PrefixPostProcCodeXGB}",
                                          "LocalPath": "/opt/ml/processing/input/code",
                                          "S3DataType": "S3Prefix",
                                          "S3InputMode": "File",
                                          "S3DataDistributionType": "FullyReplicated",
                                          "S3CompressionType": "None"
                                      }
                                  }
                              ],
                              "ProcessingOutputConfig": {
                                  "Outputs": [
                                      {
                                          "OutputName": "ll_data",
                                          "AppManaged": false,
                                          "S3Output": {
                                              "S3Uri.$": "$$.Execution.Input['xgb_jsonlinppath']",
                                              "LocalPath": "/opt/ml/processing/xgb",
                                              "S3UploadMode": "EndOfJob"
                                          }
                                      }
                                  ]
                              },
                              "AppSpecification": {
                                  "ImageUri": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-scikit-learn:0.20.0-cpu-py3",
                                  "ContainerEntrypoint": [
                                      "python3",
                                      "/opt/ml/processing/input/code/${PrefixPostProcCodeXGB}"
                                  ]
                              },
                              "RoleArn": "${SageMakerIAMRole}",
                              "ProcessingResources": {
                                  "ClusterConfig": {
                                      "InstanceCount": 1,
                                      "InstanceType":"${PreProcessingInstanceType}",
                                      "VolumeSizeInGB": 30
                                  }
                              }
                          },
                          "Type": "Task",
                          "Next": "Batch Monitoring",
                          "Retry": [ {
                             "ErrorEquals": [ "SageMaker.AmazonSageMakerException" ],
                             "IntervalSeconds": 20,
                             "MaxAttempts": 3,
                             "BackoffRate": 1
                             } ]
                      },
                      "Batch Monitoring": {
                          "Resource": "arn:aws:states:::sagemaker:createProcessingJob.sync",
                          "Parameters": {
                              "ProcessingJobName.$": "$$.Execution.Input['MonitorJobName']",
                              "ProcessingInputs": [
                                  {
                                      "InputName": "input_1",
                                      "AppManaged": false,
                                      "S3Input": {
                                          "S3Uri.$": "$$.Execution.Input['xgb_jsonlinppath']",
                                          "LocalPath.$": "$$.Execution.Input['monitorlocalpath']",
                                          "S3DataType": "S3Prefix",
                                          "S3InputMode": "File",
                                          "S3DataDistributionType": "FullyReplicated",
                                          "S3CompressionType": "None"
                                      }
                                  },
                                  {
                                      "InputName": "baseline",
                                      "AppManaged": false,
                                      "S3Input": {
                                          "S3Uri":"s3://${ConfigS3Bucket}/${BaselineS3Prefix}/statistics.json",
                                          "LocalPath": "/opt/ml/processing/baseline/stats",
                                          "S3DataType": "S3Prefix",
                                          "S3InputMode": "File",
                                          "S3DataDistributionType": "FullyReplicated",
                                          "S3CompressionType": "None"
                                      }
                                  },
                                  {
                                      "InputName": "constraints",
                                      "AppManaged": false,
                                      "S3Input": {
                                          "S3Uri": "s3://${ConfigS3Bucket}/${BaselineS3Prefix}/constraints.json",
                                          "LocalPath": "/opt/ml/processing/baseline/constraints",
                                          "S3DataType": "S3Prefix",
                                          "S3InputMode": "File",
                                          "S3DataDistributionType": "FullyReplicated",
                                          "S3CompressionType": "None"
                                      }
                                  }
                              ],
                              "ProcessingOutputConfig": {
                                  "Outputs": [
                                      {
                                          "OutputName": "result",
                                          "AppManaged": false,
                                          "S3Output": {
                                              "S3Uri.$":"$$.Execution.Input['xgb_monitoroppath']",
                                              "LocalPath": "/opt/ml/processing/output",
                                              "S3UploadMode": "EndOfJob"
                                          }
                                      }
                                  ]
                              },
                              "AppSpecification": {
                                  "ImageUri": "156813124566.dkr.ecr.us-east-1.amazonaws.com/sagemaker-model-monitor-analyzer"
                              },
                              "RoleArn": "${SageMakerIAMRole}",
                              "Environment": {
                                  "baseline_constraints": "/opt/ml/processing/baseline/constraints/constraints.json",
                                  "baseline_statistics": "/opt/ml/processing/baseline/stats/statistics.json",
                                  "dataset_format": "{\"sagemakerCaptureJson\":{\"captureIndexNames\":[\"endpointInput\",\"endpointOutput\"]}}",
                                  "dataset_source": "/opt/ml/processing/input/endpoint",
                                  "start_time.$": "$$.Execution.Input['start_time']",
                                  "end_time.$": "$$.Execution.Input['end_time']",
                                  "metric_time.$": "$$.Execution.Input['metric_time']",
                                  "output_path": "/opt/ml/processing/output",
                                  "publish_cloudwatch_metrics": "Disabled",
                                  "sagemaker_endpoint_name": "poc",
                                  "sagemaker_monitoring_schedule_name": "poc"
                              },
                              "ProcessingResources": {
                                  "ClusterConfig": {
                                      "InstanceCount": 1,
                                      "InstanceType": "${PreProcessingInstanceType}",
                                      "VolumeSizeInGB": 30
                                  }
                              },
                              "StoppingCondition": {
                                  "MaxRuntimeInSeconds": 3600
                              }
                          },
                          "Type": "Task",
                          "Next": "Evaluate Drift",
                          "Retry": [ {
                             "ErrorEquals": [ "SageMaker.AmazonSageMakerException" ],
                             "IntervalSeconds": 20,
                             "MaxAttempts": 3,
                             "BackoffRate": 1
                             } ]
                      },
                      "Evaluate Drift": {
                          "Parameters": {
                              "FunctionName": "${EvaluateDrift}",
                              "Payload": {
                               "monitoropkey.$": "$$.Execution.Input['xgb_monitoropkey']",
                               "notif_sub.$": "$$.Execution.Input['notif_sub']",
                               "modelname.$": "$$.Execution.Input['modelname']",
                               "reportopkey.$": "$$.Execution.Input['reportopkey']",
                               "starttime.$": "$$.Execution.Input['start_time']",
                               "endtime.$": "$$.Execution.Input['end_time']",
                               "inpjsonline.$": "$$.Execution.Input['xgb_jsonlinppath']",
                               "outjsonpath.$": "$$.Execution.Input['xgb_monitoroppath']",
                               "MonitorJobName.$":  "$$.Execution.Input['MonitorJobName']",
                               "baselinestat.$":"$$.Execution.Input['baselinestat']",
                               "baselinecons.$":"$$.Execution.Input['baselinecons']",
                               "infertype.$":"$$.Execution.Input['infertype']",
                               "payload_src.$":"$$.Execution.Input['payload_src']",
                               "mtrrefpath.$":"$$.Execution.Input['mtrrefpath']"
                                }
                          },
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Type": "Task",
                          "End": true
                      }
                  }
              }
            - {GlueJobs3Bookmark: !Ref GlueJobs3Bookmark, EvaluateDrift: !Ref EvaluateDrift,EvaluatePayloadlambda: !Ref EvaluatePayloadlambda,SageMakerIAMRole: !GetAtt SageMakerIAMRole.Arn, Subnet1: !Ref Subnet1, Subnet2: !Ref Subnet2, Subnet3: !Ref Subnet3, SecurityGroup: !Ref SecurityGroup}
    
        Tags:
          -
            Key: "vci:team"
            Value: !Ref TagTeam
          -
            Key: "vci:product"
            Value: !Ref TagProduct
          -
            Key: "tenant"
            Value: !Ref TagTenant
          -
            Key: "env"
            Value: !Ref Environment
    SFNIAMRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: !Join [ "-", [!Ref AWS::StackName, "SFNIAMRole", !Ref RandomString]]
        Tags:
          -
            Key: "vci:team"
            Value: !Ref TagTeam
          -
            Key: "vci:product"
            Value: !Ref TagProduct
          -
            Key: "tenant"
            Value: !Ref TagTenant
          -
            Key: "env"
            Value: !Ref Environment
        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  Service: states.amazonaws.com
                Action: "sts:AssumeRole"
        Path: "/"
        Policies:
            - PolicyName: SageMakerAccessPolicy
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - sagemaker:CreateTrainingJob
                      - sagemaker:CreateModel
                      - sagemaker:CreateTransformJob
                      - iam:PassRole
                    Resource: "*"
                  - Effect: Allow
                    Action:
                      - lambda:InvokeFunction
                    Resource: "*"
                  - Effect: Allow
                    Action:
                      - events:PutTargets
                      - events:PutRule
                      - events:DescribeRule
                    Resource:
                    - !Sub "arn:${AWS::Partition}:events:*:*:rule/StepFunctionsGetEventsForSageMakerTrainingJobsRule"
                    - !Sub "arn:${AWS::Partition}:events:*:*:rule/StepFunctionsGetEventsForSageMakerTransformJobsRule"
                    - !Sub "arn:${AWS::Partition}:events:*:*:rule/StepFunctionsGetEventsForSageMakerTuningJobsRule"
        ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
        - 'arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchEventsFullAccess'
    SageMakerIAMRole:
      Type: "AWS::IAM::Role"
      DependsOn: SFNIAMRole
      Properties:
        RoleName: !Join [ "-", [!Ref AWS::StackName, "SMIAMRole", !Ref RandomString]]
      Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  Service: "sagemaker.amazonaws.com"
                Action: "sts:AssumeRole"
          Path: "/"
          Tags:
          -
            Key: "vci:team"
            Value: !Ref TagTeam
          -
            Key: "vci:product"
            Value: !Ref TagProduct
          -
            Key: "tenant"
            Value: !Ref TagTenant
          -
            Key: "env"
            Value: !Ref Environment
     
          Policies:
            - PolicyName: SageMakerAPIExecutionPolicy
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                    - cloudwatch:PutMetricData
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:CreateLogGroup
                    - logs:DescribeLogStreams
                    - ecr:GetAuthorizationToken
                    - ecr:BatchCheckLayerAvailability
                    - ecr:GetDownloadUrlForLayer
                    - ecr:BatchGetImage
                    Resource: "*"
                  - Effect: Allow
                    Action:
                      - s3:GetObject
                      - s3:PutObject
                    Resource: "*"
                  - Effect: Allow
                    Action:
                      - s3:ListBucket
                    Resource: "*"
                  - Effect: Allow
                    Action:
                      - kms:Decrypt
                      - kms:Encrypt
                      - kms:GenerateDataKey
                    Resource: !Join [":", [arn:aws:kms:us-east-1,!Ref AWS::AccountId, !Ref KMSKeyID]]  
          ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
    stepfunctiontriggerlambda:
      Type: "AWS::Lambda::Function"
      Properties:
        Handler: "index.lambda_handler"
        FunctionName: !Join [ "-", [!Ref AWS::StackName, "MonitorJobTgrStFN",!Ref RandomString]]
        Role: !GetAtt [ lambdarole, Arn ]
        Tags:
          -
            Key: "vci:team"
            Value: !Ref TagTeam
          -
            Key: "vci:product"
            Value: !Ref TagProduct
          -
            Key: "tenant"
            Value: !Ref TagTenant
          -
            Key: "env"
            Value: !Ref Environment
        Code:
          ZipFile:
            !Sub
              - |-
                import json
                import uuid
                import boto3
                import time
                import datetime
                def lambda_handler(event, context):
                    # TODO implement
                    client = boto3.client('stepfunctions')
                    vyear=datetime.datetime.now().strftime("%Y")
                    vmonth=datetime.datetime.now().strftime("%m")
                    vday=datetime.datetime.now().strftime("%d")
                    vhour=datetime.datetime.now().strftime("%H")
                    ehour=datetime.datetime(int(vyear),int(vmonth),int(vday),int(vhour)+1).strftime("%H")
                    jsonlinppath="s3://${DataS3Bucket}/${PrefixJsonlPath}"
                    RTjsonlinppath="s3://${DataS3Bucket}/${RTPrefixJsonlPath}"
                    baselinecons="s3://${ConfigS3Bucket}/${BaselineS3Prefix}/constraints.json"
                    baselinestat="s3://${ConfigS3Bucket}/${BaselineS3Prefix}/statistics.json"
                    infertype='Batch'
                    RTinfertype='Realtime'
                    ll_jsonlinppath=jsonlinppath+"ll"+"/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    xgb_jsonlinppath=jsonlinppath+"xg"+"/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    RT_ll_jsonlinppath=RTjsonlinppath+"ll"+"/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    RT_xgb_jsonlinppath=RTjsonlinppath+"xg"+"/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    RT_ll_prep_jsonlinp="${RTPrefixJsonlPath}"+"ll"+"/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    RT_xgb_prep_jsonlinp="${RTPrefixJsonlPath}"+"xg"+"/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    monitorlocalpath="/opt/ml/processing/input/endpoint/poc/AllTraffic/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    ll_monitoroppath="s3://${DataS3Bucket}/${PrefixViolationPath}"+"ll/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    xgb_monitoroppath="s3://${DataS3Bucket}/${PrefixViolationPath}"+"xg/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    RT_ll_monitoroppath="s3://${DataS3Bucket}/${RTPrefixViolationPath}"+"ll/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    RT_xgb_monitoroppath="s3://${DataS3Bucket}/${RTPrefixViolationPath}"+"xg/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    ll_monitoropkey="${PrefixViolationPath}"+"ll/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    xgb_monitoropkey="${PrefixViolationPath}"+"xg/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    RT_ll_monitoropkey="${RTPrefixViolationPath}"+"ll/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    RT_xgb_monitoropkey="${RTPrefixViolationPath}"+"xg/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    start_time=("{}-{}-{}T{}:{}:{}Z".format(vyear,vmonth,vday,vhour,"00","00"))
                    end_time=("{}-{}-{}T{}:{}:{}Z".format(vyear,vmonth,vday,ehour,"00","00"))
                    metric_time=("{}-{}-{}T{}:{}:{}Z".format(vyear,vmonth,vday,vhour,"00","00"))
                    ll_notif_sub="Data Drift Monitor - Linear Learner - Batch"
                    xgb_notif_sub="Data Drift Monitor - XGboost - Batch"
                    RT_ll_notif_sub="Data Drift Monitor - Linear Learner - Realtime"
                    RT_xgb_notif_sub="Data Drift Monitor - XGboost - Realtime"
                    ll_payload_source="${GlueS3Dest}/ll/"
                    xg_payload_source="${GlueS3Dest}/xg/"
                    RT_ll_payload_source="${RTGlueS3Dest}/ll/"
                    RT_xg_payload_source="${RTGlueS3Dest}/xg/"
                    xg_modelname="XGboost"
                    ll_modelname="Linear Learner"
                    ll_drfitreportkey="${PrefixReportPath}"+"ll/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    xg_drfitreportkey="${PrefixReportPath}"+"xg/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    RT_ll_drfitreportkey="${RTPrefixReportPath}"+"ll/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    RT_xg_drfitreportkey="${RTPrefixReportPath}"+"xg/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    XGRTReportPath="${RTReportPath}"+"xg/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    LLRTReportPath="${RTReportPath}"+"ll/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    ll_inp_groundtruth="${InpGroundTruth}batch/ll/"
                    xg_inp_groundtruth="${InpGroundTruth}batch/xg/"
                    RT_ll_inp_groundtruth="${InpGroundTruth}realtime/ll/"
                    RT_xg_inp_groundtruth="${InpGroundTruth}realtime/xg/"
                    ll_op_groundtruth="${OpGroundTruth}batch/ll/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    xg_op_groundtruth="${OpGroundTruth}batch/xg/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    RT_ll_op_groundtruth="${OpGroundTruth}realtime/ll/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    RT_xg_op_groundtruth="${OpGroundTruth}realtime/xg/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    ll_mtrrefpath="${Scoremonitorbridgepath}batch/ll/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    xg_mtrrefpath="${Scoremonitorbridgepath}batch/xg/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    RT_ll_mtrrefpath="${Scoremonitorbridgepath}realtime/ll/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    RT_xg_mtrrefpath="${Scoremonitorbridgepath}realtime/xg/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    RT_ll_gtinputpath="s3://${DataS3Bucket}/${OpGroundTruth}realtime/ll/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    RT_ll_gtmergeoutput="s3://${DataS3Bucket}/${InpMergedGroundTruth}realtime/ll/"+vyear+"/"+vmonth+"/"+vday+"/"+vhour+"/"
                    ll_Processing_job_name =  "${stackName}-ll-processing-{}".format(
                        uuid.uuid1().time_low)
                    ll_Monitor_job_name =  "${stackName}-ll-monitoring-{}".format(
                        uuid.uuid1().time_low)
                    xgb_Processing_job_name =  "${stackName}-xg-processing-{}".format(
                        uuid.uuid1().time_low)
                    xgb_Monitor_job_name =  "${stackName}-xg-monitoring-{}".format(
                        uuid.uuid1().time_low)    
                    RT_ll_Monitor_job_name =  "${stackName}-RT-ll-monitoring-{}".format(
                        uuid.uuid1().time_low)
                    RT_xgb_Monitor_job_name =  "${stackName}-RT-xg-monitoring-{}".format(
                        uuid.uuid1().time_low)     
                    RT_ll_GTMergeJobName= "${stackName}-LLRT-gtmerge-{}".format(uuid.uuid1().time_low)
                    RT_ll_ModelDriftJobname= "${stackName}-LLRT-modeldrift-{}".format(uuid.uuid1().time_low)   
                    response = client.start_execution(
                        stateMachineArn = '${LLModelMonitorSFN}',
                        input= "{\"mtrrefpath\":\""+ ll_mtrrefpath+"\",\"inpgroundtruth\":\""+ ll_inp_groundtruth+"\",\"opgroundtruth\":\""+ ll_op_groundtruth+"\",\"infertype\":\""+ infertype+"\",\"baselinestat\":\""+ baselinestat+"\",\"baselinecons\":\""+ baselinecons+"\",\"reportopkey\":\""+ ll_drfitreportkey+"\",\"payload_src\":\""+ ll_payload_source+"\",\"modelname\":\""+ ll_modelname+"\",\"notif_sub\":\""+ ll_notif_sub+"\",\"Post-processing\":\""+ ll_Processing_job_name+"\",\"MonitorJobName\":\""+ ll_Monitor_job_name+"\",\"ll_jsonlinppath\":\""+ ll_jsonlinppath+"\",\"monitorlocalpath\":\""+ monitorlocalpath+"\",\"ll_monitoroppath\":\""+ ll_monitoroppath+"\",\"start_time\":\""+ start_time+"\",\"end_time\":\""+ end_time+"\",\"metric_time\":\""+ metric_time+"\",\"ll_monitoropkey\":\""+ ll_monitoropkey+"\"}"
                      )
                    time.sleep(50)
                    response = client.start_execution(
                        stateMachineArn = '${XGBModelMonitorSFN}',
                        input= "{\"mtrrefpath\":\""+ xg_mtrrefpath+"\",\"inpgroundtruth\":\""+ xg_inp_groundtruth+"\",\"opgroundtruth\":\""+ xg_op_groundtruth+"\",\"infertype\":\""+ infertype+"\",\"baselinestat\":\""+ baselinestat+"\",\"baselinecons\":\""+ baselinecons+"\",\"reportopkey\":\""+ xg_drfitreportkey+"\",\"payload_src\":\""+ xg_payload_source+"\",\"modelname\":\""+ xg_modelname+"\",\"notif_sub\":\""+ xgb_notif_sub+"\",\"Post-processing\":\""+ xgb_Processing_job_name+"\",\"MonitorJobName\":\""+ xgb_Monitor_job_name+"\",\"xgb_jsonlinppath\":\""+ xgb_jsonlinppath+"\",\"monitorlocalpath\":\""+ monitorlocalpath+"\",\"xgb_monitoroppath\":\""+ xgb_monitoroppath+"\",\"start_time\":\""+ start_time+"\",\"end_time\":\""+ end_time+"\",\"metric_time\":\""+ metric_time+"\",\"xgb_monitoropkey\":\""+ xgb_monitoropkey+"\"}"
                      )  
                    time.sleep(50)
                    response = client.start_execution(
                        stateMachineArn = '${LLRTModelMonitorSFN}',
                        input= "{\"MD_MonitorJobName\":\""+ RT_ll_ModelDriftJobname+"\",\"GTMergeJobName\":\""+ RT_ll_GTMergeJobName+"\",\"gtmergeoutput\":\""+ RT_ll_gtmergeoutput+"\",\"gtinputpath\":\""+ RT_ll_gtinputpath+"\",\"mtrrefpath\":\""+ RT_ll_mtrrefpath+"\",\"inpgroundtruth\":\""+ RT_ll_inp_groundtruth+"\",\"opgroundtruth\":\""+ RT_ll_op_groundtruth+"\",\"RTReportPath\":\""+ LLRTReportPath+"\",\"prep_jsonlpath\":\""+ RT_ll_prep_jsonlinp+"\",\"infertype\":\""+ RTinfertype+"\",\"baselinestat\":\""+ baselinestat+"\",\"baselinecons\":\""+ baselinecons+"\",\"reportopkey\":\""+ RT_ll_drfitreportkey+"\",\"payload_src\":\""+ RT_ll_payload_source+"\",\"modelname\":\""+ ll_modelname+"\",\"notif_sub\":\""+ RT_ll_notif_sub+"\",\"MonitorJobName\":\""+ RT_ll_Monitor_job_name+"\",\"jsonlinppath\":\""+ RT_ll_jsonlinppath+"\",\"monitorlocalpath\":\""+ monitorlocalpath+"\",\"monitoroppath\":\""+ RT_ll_monitoroppath+"\",\"start_time\":\""+ start_time+"\",\"end_time\":\""+ end_time+"\",\"metric_time\":\""+ metric_time+"\",\"monitoropkey\":\""+ RT_ll_monitoropkey+"\"}"
                      )   
                    time.sleep(50)
                    response = client.start_execution(
                        stateMachineArn = '${XGBRTModelMonitorSFN}',
                        input= "{\"mtrrefpath\":\""+ RT_xg_mtrrefpath+"\",\"inpgroundtruth\":\""+ RT_xg_inp_groundtruth+"\",\"opgroundtruth\":\""+ RT_xg_op_groundtruth+"\",\"RTReportPath\":\""+ XGRTReportPath+"\",\"prep_jsonlpath\":\""+ RT_xgb_prep_jsonlinp+"\",\"infertype\":\""+ RTinfertype+"\",\"baselinestat\":\""+ baselinestat+"\",\"baselinecons\":\""+ baselinecons+"\",\"reportopkey\":\""+ RT_xg_drfitreportkey+"\",\"payload_src\":\""+ RT_xg_payload_source+"\",\"modelname\":\""+ xg_modelname+"\",\"notif_sub\":\""+ RT_xgb_notif_sub+"\",\"MonitorJobName\":\""+ RT_xgb_Monitor_job_name+"\",\"jsonlinppath\":\""+ RT_xgb_jsonlinppath+"\",\"monitorlocalpath\":\""+ monitorlocalpath+"\",\"monitoroppath\":\""+ RT_xgb_monitoroppath+"\",\"start_time\":\""+ start_time+"\",\"end_time\":\""+ end_time+"\",\"metric_time\":\""+ metric_time+"\",\"monitoropkey\":\""+ RT_xgb_monitoropkey+"\"}"
                      )    
                    
              - {LLModelMonitorSFN: !GetAtt [ LLModelMonitorSFN, Arn ],XGBModelMonitorSFN: !GetAtt [ XGBModelMonitorSFN, Arn ]}
        Runtime: "python3.7"
        Timeout: "180"
        
    EvaluatePayloadlambda:
      Type: "AWS::Lambda::Function"
      Properties:
        Handler: "index.lambda_handler"
        FunctionName: !Join [ "-", [!Ref AWS::StackName, "EvaluatePayloadlambda",!Ref RandomString]]
        Role: !GetAtt [ lambdarole, Arn ]
        Tags:
          -
            Key: "vci:team"
            Value: !Ref TagTeam
          -
            Key: "vci:product"
            Value: !Ref TagProduct
          -
            Key: "tenant"
            Value: !Ref TagTenant
          -
            Key: "env"
            Value: !Ref Environment
        Code:
          ZipFile:
            !Sub
              - |-
                import json
                import uuid
                import boto3
                import time
                import datetime
                import pandas as pd
                def csvtojson(inp_gt,inpbucket,op_gt):
                    bucket = inpbucket
                    inp_prefix =  inp_gt
                    client = boto3.client("s3")
                    s3=boto3.resource('s3')
                    all_files = list()
                    gtflag=0 # assume no ground truth data
                    response = client.list_objects_v2(Bucket = bucket, Prefix = inp_prefix)
                    output_path = '/tmp/groundtruth.jsonl'  
                    for i in response['Contents']:
                      if '.csv' in i['Key']:
                        gtflag=1
                        all_files.append(i['Key']) 
                        #print("all files", all_files)
                    for filename in all_files:
                         
                      local_file_name = "/tmp/gt.csv"
                      s3.Bucket(bucket).download_file(filename,local_file_name)
                      with open(output_path, 'w') as writer:
                        df= pd.read_csv(local_file_name)
                        for i in range(len(df)):
                          inf_id = df.iloc[i,0]
                          grd = df.iloc[i,1]
                          std_format = {"groundTruthData": {"data": "9510", "encoding": "CSV"}, "eventMetadata": {"eventId":"20220523165348"}, "eventVersion": "0"}
                          std_format["groundTruthData"]["data"] = str(grd)
                          std_format["eventMetadata"]["eventId"] = str(inf_id)
                          std_format = str(std_format)
                          if i==0:
                            writer.write(std_format)
                          else:
                            writer.write('\n' + std_format)
                          
                    if gtflag==1:
                      bucket = s3.Bucket(bucket)
                      final_key= op_gt+'groundtruth.jsonl'
                      bucket.upload_file(output_path, final_key)      

                def lambda_handler(event, context):
                    client = boto3.client("s3")
                    bucket="${DataS3Bucket}"
                    prefix=event['payload_src']
                    src=event['call_source']
                    inp_gt=event['inpgroundtruth']
                    op_gt=event['opgroundtruth']
                    if 'Batch' in src:
                      resp=client.list_objects(Bucket=bucket,Prefix=prefix)
                      if "Contents" in resp:
                        csvtojson(inp_gt,bucket,op_gt)
                        return {'flag':1}
                      else:
                        return {'flag':0}
                    elif 'Realtime' in src:
                      prepjasonpath=event['prep_jsonpath']
                      resp=client.list_objects(Bucket=bucket,Prefix=prefix)
                      list_file_path = [] #storing file path
                      if "Contents" in resp:
                        resp=client.list_objects(Bucket=bucket,Prefix=prepjasonpath)
                        for i in resp['Contents']:
                          if 'jsonl' not in i['Key']:
                            list_file_path.append(i['Key'])
                            print('list_file_path', list_file_path)
                        for converting_jsonl in list_file_path:
                          client.copy_object(Bucket=bucket,CopySource={'Bucket': bucket, 'Key': converting_jsonl},
                          Key=converting_jsonl+'.jsonl')
                          client.delete_object(Bucket=bucket, Key=converting_jsonl)
                        csvtojson(inp_gt,bucket,op_gt)
                        return {'flag':1}
                      else:
                        return {'flag':0}  

              - { modelname: "poc"}
        Runtime: "python3.6"
        Timeout: "60"
        Layers: [!Ref LambdaLayerSageMaker]
    EvaluateDrift:
      Type: "AWS::Lambda::Function"
      Properties:
        Handler: "index.lambda_handler"
        FunctionName: !Join [ "-", [!Ref AWS::StackName, "EvaluateDrift",!Ref RandomString]]
        Role: !GetAtt [ lambdarole, Arn ]
        Tags:
          -
            Key: "vci:team"
            Value: !Ref TagTeam
          -
            Key: "vci:product"
            Value: !Ref TagProduct
          -
            Key: "tenant"
            Value: !Ref TagTenant
          -
            Key: "env"
            Value: !Ref Environment
        Code:
          ZipFile:
            !Sub
              - |-
                import json
                import uuid
                import boto3
                import time
                import datetime
                from smart_open import smart_open
                import pandas as pd
                import csv
                from io import StringIO
                def extractinferid(bucket,inppath,monitorjobname,mtrrefpath,modelname):
                    s3_client=boto3.client('s3')
                    s3rsc=boto3.resource('s3')
                    response = s3_client.list_objects(Bucket=bucket,Prefix=inppath)
                    file_list=list()
                    print("hello")
                    for i in response['Contents']:
                        file_list.append(i['Key'])
                    df=pd.DataFrame()
                    local_file_name = "/tmp/extractid.csv"
                    for filename in file_list:
                        s3rsc.Bucket(bucket).download_file(filename,local_file_name)
                        df1=pd.read_csv(local_file_name)
                        df=df.append(df1)
                    df=df.iloc[:,3:4]
                    df2=df.copy(deep=True)
                    df2.columns=['Inferenceid']
                    df2['monitorjobname']=monitorjobname
                    df2['modelname']=modelname
                    csv_buffer = StringIO()
                    df2.to_csv(csv_buffer,index=False)
                    s=writecsv(csv_buffer,bucket,mtrrefpath+'scoremonitorbridge'+'.csv')
                def baselinecsv(bkt,statfile,output_path,opbkt):
                    s3_client=boto3.client('s3')
                    response = s3_client.get_object(Bucket=bkt,Key=statfile)
                    text = response['Body'].read().decode('utf-8')
                    data = json.loads(text)
                    df1=pd.DataFrame()
                    df=pd.DataFrame()
                    for x in data['features']:
                      df=pd.DataFrame()
                      df=df.append(['0'])
                      df['feature']=x['name']
                      df['mean']=x['numerical_statistics']['mean']
                      df['max']=x['numerical_statistics']['max']
                      df['min']=x['numerical_statistics']['min']
                      df['std_dev']=x['numerical_statistics']['std_dev']
                      df1=df1.append(df)
                    df1.drop(columns=[0],inplace=True)
                    csv_buffer = StringIO()
                    df1.to_csv(csv_buffer,index=False)
                    s=writecsv(csv_buffer,opbkt,output_path+'baselinedata'+'.csv')
                def writecsv(content,buckname,buckobj):
                    clnt=boto3.resource('s3')
                    clnt.Object(buckname, buckobj).put(Body=content.getvalue())
                def jsonl_to_csv(input_path, bkt,output_path,filename,modelname,monitorjobname,mtrrefpath):
                    col_name=list()
                    for i in range(18):
                        column = 'col_' + str(i)
                        col_name.append(column)
                    df = pd.DataFrame(columns=col_name)
                    i = 0
                    for line in smart_open(input_path, 'rb'):
                        input_row = json.loads(line.decode('utf8'))
                        input_data = input_row['captureData']['endpointInput']['data']
                        input_data = input_data.split(',')
                        inference_id = input_row['eventMetadata']['inferenceId']
                        runtime=datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        output = input_row['captureData']['endpointOutput']['data'].replace('\n', '')
                        input_data.insert(0, 'NA for realtime data')
                        input_data.insert(0, inference_id)
                        input_data.insert(0, 'realtime')
                        input_data.insert(0, modelname)
                        input_data.insert(0, runtime)
                        input_data.append(output)
                        df.loc[i] = input_data
                        i = i+1
                    csv_buffer = StringIO()
                    df.to_csv(csv_buffer,index=False)
                    s=writecsv(csv_buffer,bkt,output_path+filename+'.csv')
                    df1=df.iloc[:,3:4] # read the inference id from position
                    df2=df1.copy(deep=True)
                    df2.columns=['Inferenceid']
                    df2['monitorjobname']=monitorjobname
                    df2['modelname']=modelname
                    csv_buffer = StringIO()
                    df2.to_csv(csv_buffer,index=False)
                    s=writecsv(csv_buffer,bkt,mtrrefpath+filename+'.csv')
                    return 'Transfer is done'    
                def lambda_handler(event, context):
                    try:
                      s3_client = boto3.client('s3')
                      monitoropkey=event['monitoropkey']
                      reportopkey=event['reportopkey']
                      modelname=event['modelname']
                      notif_sub=event['notif_sub']
                      print(monitoropkey)
                      v_s3_input_bucket = "${DataS3Bucket}"
                      driftopkey =monitoropkey+"constraint_violations.json"
                      response = s3_client.get_object(Bucket=v_s3_input_bucket,Key=driftopkey)
                      text = response['Body'].read().decode('utf-8')
                      data = json.loads(text)
                      payloadd=data["violations"]
                      objNamecsv=reportopkey+"constraint_violations.csv"
                      df=pd.DataFrame.from_dict(payloadd)
                      df['description']=df.description.apply(lambda x:x.replace(",",""))
                      df["modelname"]=event['modelname']
                      df["start_time"]=event['starttime']
                      df["end_time"]=event['endtime']
                      df["inp_jsonline"]=event['inpjsonline']
                      df["outjsonpath"]=event['outjsonpath']
                      df["monitorjobname"]=event['MonitorJobName']
                      df['infertype']=event['infertype']
                      df['baselinestat']=event['baselinestat']
                      df['baselinecons']=event['baselinecons']
                      csv_buffer = StringIO()
                      df.to_csv(csv_buffer,index=False)
                      s=writecsv(csv_buffer,v_s3_input_bucket,objNamecsv)
                      #qsclient=boto3.client('quicksight')
                      #datsetId='9a0e62c2-64ca-4ec0-a9c1-dac539055d4a'
                      #resp=qsclient.create_ingestion(DataSetId=datsetId,IngestionId="ingestion-{}".format(uuid.uuid1().time_low),AwsAccountId="${AWSAccountId}")
                      mtrrefpath=event['mtrrefpath']
                      if event['infertype'] == "Realtime":
                      # JSONL to CSV conversion for Real time report on scoring data
                        output_path=event['RTReportPath']
                        inputJsonpath=event['prep_jsonlpath']
                        monitorjobname=event['MonitorJobName']
                        response = s3_client.list_objects(Bucket=v_s3_input_bucket,Prefix=inputJsonpath)
                        file_list=list()
                        for i in response['Contents']:
                          filepath= 's3://'+ v_s3_input_bucket+ '/'+i['Key']
                          file_list.append(filepath)
                        for i in file_list:
                          filename=i.split('/')[-1][0:-6]
                          jsonl_to_csv(i,v_s3_input_bucket,output_path,filename,modelname,monitorjobname,mtrrefpath)
                      if event['infertype'] == "Batch":
                      # generation of scoring bridge data (infer id and monitor job name)
                        inpscorepath=event['payload_src']
                        monitorjobname=event['MonitorJobName']
                        extractinferid(v_s3_input_bucket,inpscorepath,monitorjobname,mtrrefpath,modelname)
                      baselinestat="${BaselineS3Prefix}/statistics.json"
                      baselinebkt="${ConfigS3Bucket}"
                      bslienreportpath="${BslineReportPath}"
                      opbkt=v_s3_input_bucket
                      baselinecsv(baselinebkt,baselinestat,bslienreportpath,opbkt)
                      body = data
                      sns_topic_arn="${StepFunctionFailureSNSTopic}"
                      sns_client = boto3.client('sns')
                      response = sns_client.publish(
                      TargetArn=sns_topic_arn,
                      Message=json.dumps({'default': json.dumps(f"{data}"),
                            'sms': notif_sub,
                            'email': body}),Subject=notif_sub,
                            MessageStructure='json')
                      return response      
                    except Exception as e:
                      print(str(e))
                      return "No Drift detected"
                      
              - { modelname: "poc",StepFunctionFailureSNSTopic: !Ref StepFunctionFailureSNSTopic,AWSAccountId: !Ref AWS::AccountId}      
        Runtime: "python3.6"
        Timeout: "180"
        Layers: [!Ref LambdaLayerSageMaker,!Ref smartopenlayer]
    LambdaLayerSageMaker:
      Type: "AWS::Lambda::LayerVersion"
      Properties:
        CompatibleRuntimes:
          - python3.6
          - python3.7
        Content:
          S3Bucket: !Ref ConfigS3Bucket
          S3Key: "layers/sagemaker_lambda.zip"
        Description: "SageMakerLayer"
        LayerName:  "SageMakerLayer"
    smartopenlayer:
      Type: "AWS::Lambda::LayerVersion"
      Properties:
        CompatibleRuntimes:
          - python3.6
          - python3.7
        Content:
          S3Bucket: !Ref ConfigS3Bucket
          S3Key: "layers/smartopen.zip"
        Description: "SmartopenLayer"
        LayerName:  "smartopenlayer"                
    GlueJobs3Bookmark:
      Type: "AWS::Glue::Job"
      Properties:
        Name: !Join [ "-", [!Ref AWS::StackName, "ModelMonitorS3DataExtract",!Ref RandomString]]
        Command:
          Name: "ModelMonitorS3DataExtract"
          ScriptLocation: !Join [ "/", ["s3:/", !Ref DataS3Bucket, !Ref CodeLocation, !Ref PrefixGlueCode]]
          PythonVersion: 3
        DefaultArguments:
          "--job-bookmark-option": "job-bookmark-enable"
          "--job-language": "python"
        Role:  !GetAtt [ GlueRole, Arn ]
        GlueVersion: 3.0
        NumberOfWorkers: 2
        ExecutionProperty:
          "MaxConcurrentRuns": 4
        WorkerType: "G.2X"
        Tags:
          "vci:team": !Ref TagTeam
          "vci:product": !Ref TagProduct
          "tenant": !Ref TagTenant
          "env": !Ref Environment
    lambdarole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: !Join [ "-", [!Ref AWS::StackName, "LambdaIAMRole", !Ref RandomString]]
        Tags:
          -
            Key: "vci:team"
            Value: !Ref TagTeam
          -
            Key: "vci:product"
            Value: !Ref TagProduct
          -
            Key: "tenant"
            Value: !Ref TagTenant
          -
            Key: "env"
            Value: !Ref Environment
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: LambdaExecutionPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                    - "s3:ListBucket"
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - "sns:*"
                  Resource: "*"  
                - Effect: Allow
                  Action:
                    - "states:StartExecution"
                    - "sagemaker:*"
                    - "ssm:*"
                    - "ec2:*"
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - "quicksight:ListDataSources"
                    - "quicksight:CreateIngestion"
                    - "quicksight:ListDataSets"
                    - "quicksight:ListIngestions"
                  Resource: "*"  
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    StepFunctionFailureSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: !Join [ "-", [!Ref AWS::StackName, "SFnFail",!Ref RandomString]]  
        Tags:
          -
            Key: "vci:team"
            Value: !Ref TagTeam
          -
            Key: "vci:product"
            Value: !Ref TagProduct
          -
            Key: "tenant"
            Value: !Ref TagTenant
          -
            Key: "env"
            Value: !Ref Environment
    NotifierSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: !Ref NotifierEmail
        Protocol: email
        TopicArn: !Ref StepFunctionFailureSNSTopic
    MonitorEventRuleOnFailure:
      Type: AWS::Events::Rule
      Properties: 
        Description: "EventRule"
        Name: !Join [ "-", [!Ref AWS::StackName, "Monitorfailure", !Ref RandomString]]
        EventPattern: 
          source:
            - aws.states
          detail-type:
            - Step Functions Execution Status Change
          detail:
            stateMachineArn:
              - !Ref LLModelMonitorSFN
              - !Ref XGBModelMonitorSFN
              - !Ref LLRTModelMonitorSFN
              - !Ref XGBRTModelMonitorSFN
          
        State: "ENABLED"
        Targets: 
          - 
            Arn: !Ref StepFunctionFailureSNSTopic
            Id: "Notification"
            InputTransformer:
              InputPathsMap:
                "starttime": "$.time"
                "statemachine": "$.detail.stateMachineArn"
                "status": "$.detail.status"
              InputTemplate: |
                "The step machine <statemachine> is in status <status> at time <starttime> "
    PolicyForTopicAccess: 
      Type: AWS::SNS::TopicPolicy
      Properties: 
        PolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Sid:  "Monitor_topic_default_statement_ID"
              Effect: Allow
              Principal: 
                AWS: "*"
              Action:
                - "SNS:GetTopicAttributes"
                - "SNS:SetTopicAttributes"
                - "SNS:AddPermission"
                - "SNS:RemovePermission"
                - "SNS:DeleteTopic"
                - "SNS:Subscribe"
                - "SNS:ListSubscriptionsByTopic"
                - "SNS:Publish"
                - "SNS:Receive"
              Resource: !Ref StepFunctionFailureSNSTopic
              Condition:
                StringEquals:
                  AWS:SourceOwner: !Ref AWS::AccountId
            - Sid:  "monitortopicnotificationaccessid"
              Effect: Allow
              Principal: 
                Service: "events.amazonaws.com"
              Action: "sns:Publish"
              Resource: !Ref StepFunctionFailureSNSTopic
        Topics:
        - !Ref StepFunctionFailureSNSTopic         
    GlueRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: !Join [ "-", [!Ref AWS::StackName, "GlueIAMRole", !Ref RandomString]]
        Tags:
          -
            Key: "vci:team"
            Value: !Ref TagTeam
          -
            Key: "vci:product"
            Value: !Ref TagProduct
          -
            Key: "tenant"
            Value: !Ref TagTenant
          -
            Key: "env"
            Value: !Ref Environment
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: glue.amazonaws.com
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: GlueExecutionPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                    - "s3:ListBucket"
                    - "s3:DeleteObjectVersion"
                    - "s3:DeleteObject"
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - kms:Decrypt
                    - kms:Encrypt
                    - kms:GenerateDataKey
                  Resource: !Join [":", [arn:aws:kms:us-east-1,!Ref AWS::AccountId, !Ref KMSKeyID]]   
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
    ModelMonitorPipelineScheduleEvent: 
      Type: AWS::Events::Rule
      Properties: 
        Description: "ScheduledRule"
        Name: !Join [ "-", [!Ref AWS::StackName, "Scheduler", !Ref RandomString]]
        ScheduleExpression: "rate(1 hour)"
        State: "ENABLED"
        Targets: 
          - 
            Arn: 
              Fn::GetAtt: 
                - "stepfunctiontriggerlambda"
                - "Arn"
            Id: "TargetFunctionV1"
    PermissionForEventsToInvokeLambda: 
      Type: AWS::Lambda::Permission
      Properties: 
        FunctionName: 
          Ref: "stepfunctiontriggerlambda"
        Action: "lambda:InvokeFunction"
        Principal: "events.amazonaws.com"
        SourceArn: 
          Fn::GetAtt: 
            - "ModelMonitorPipelineScheduleEvent"
            - "Arn"          
    ModelMonitor:
      Type: AWS::Glue::Database
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseInput:
          Description: A Glue database Model Monitor
          Name: modelmonitordb
    DataDriftTbl:
      Type: AWS::Glue::Table
      Properties:
        DatabaseName: !Ref ModelMonitor
        CatalogId: !Ref AWS::AccountId
        TableInput:
          Name: !Ref DataDriftTable
          TableType: EXTERNAL_TABLE
          Parameters:
            classification: csv
            typeOfData: file
            skip.header.line.count: '1'
          StorageDescriptor:
            BucketColumns: []
            Columns:
              - Name: feature_name
                Type: string
              - Name: constraint_check_type
                Type: string
              - Name: description
                Type: string
              - Name: modelname
                Type: string
              - Name: start_time
                Type: string
              - Name: end_time
                Type: string
              - Name: inp_jsonline
                Type: string
              - Name: outjsonpath
                Type: string
              - Name: monitorjobname
                Type: string
              - Name: infertype
                Type: string
              - Name: baselinestat
                Type: string
              - Name: baselinecons
                Type: string      
            Compressed: false
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Join 
              - ''
              - - 's3://'
                - !Ref DataS3Bucket
                - /
                - !Ref DriftReportPath
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              Parameters:
                serialization.format: ','
                field.delim:  ','
              SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
    ScoringDataTbl:
      Type: AWS::Glue::Table
      Properties:
        DatabaseName: !Ref ModelMonitor
        CatalogId: !Ref AWS::AccountId
        TableInput:
          Name: !Ref ScoringDataTable
          TableType: EXTERNAL_TABLE
          Parameters:
            classification: csv
            typeOfData: file
            skip.header.line.count: '1'
          StorageDescriptor:
            BucketColumns: []
            Columns:
              - Name: runtime
                Type: string
              - Name: modelname
                Type: string
              - Name: infertype
                Type: string  
              - Name: InferenceId
                Type: string
              - Name: scoringfilename
                Type: string  
              - Name: year
                Type: string
              - Name: manufacturer
                Type: string
              - Name: model
                Type: string
              - Name: condition
                Type: string
              - Name: cylinders
                Type: string
              - Name: fuel
                Type: string
              - Name: odometer
                Type: string
              - Name: titlestatus
                Type: string
              - Name: transmission
                Type: string
              - Name: drive
                Type: string
              - Name: type
                Type: string
              - Name: paintcolor
                Type: string
              - Name: predprice
                Type: string          
            Compressed: false
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Join 
              - ''
              - - 's3://'
                - !Ref DataS3Bucket
                - /
                - !Ref InferReportPath
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              Parameters:
                serialization.format: ','
                field.delim:  ','
              SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
    BaselineDataTbl:
      Type: AWS::Glue::Table
      Properties:
        DatabaseName: !Ref ModelMonitor
        CatalogId: !Ref AWS::AccountId
        TableInput:
          Name: !Ref BaselineDataTable
          TableType: EXTERNAL_TABLE
          Parameters:
            classification: csv
            typeOfData: file
            skip.header.line.count: '1'
          StorageDescriptor:
            BucketColumns: []
            Columns:
              - Name: feature
                Type: string
              - Name: meanval
                Type: string
              - Name: maxval
                Type: string  
              - Name: minval
                Type: string
              - Name: std_dev
                Type: string
                        
            Compressed: false
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Join 
              - ''
              - - 's3://'
                - !Ref DataS3Bucket
                - /
                - !Ref BslineReportPath
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              Parameters:
                serialization.format: ','
                field.delim:  ','
              SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe    
    ScoreMonitorBridge:
      Type: AWS::Glue::Table
      Properties:
        DatabaseName: !Ref ModelMonitor
        CatalogId: !Ref AWS::AccountId
        TableInput:
          Name: !Ref ScoreMonitorBridgeTable
          TableType: EXTERNAL_TABLE
          Parameters:
            classification: csv
            typeOfData: file
            skip.header.line.count: '1'
          StorageDescriptor:
            BucketColumns: []
            Columns:
              - Name: inferenceid
                Type: string
              - Name: monitorjobname
                Type: string
              - Name: modelname
                Type: string  
            Compressed: false
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Join 
              - ''
              - - 's3://'
                - !Ref DataS3Bucket
                - /
                - !Ref Scoremonitorbridgepath
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              Parameters:
                serialization.format: ','
                field.delim:  ','
              SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
    LLRTModelMonitorSFN:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        RoleArn: !GetAtt [ SFNIAMRole, Arn ]
        StateMachineName: !Join [ "-", [!Ref AWS::StackName, "LLRTModelMonitorSFN", !Ref RandomString]] 
        DefinitionString:
          !Sub
            - |-
              {
                "StartAt": "Data Extract",
                "States": {
                  "Data Extract": {
                    "Parameters": {
                      "JobName": "${RTdataS3Bookmark}",
                      "Arguments": {
                        "--S3_SOURCE": "s3://${DataS3Bucket}/${RTGlueS3Source}/ll/",
                        "--S3_DEST": "s3://${DataS3Bucket}/${RTGlueS3Dest}/ll/",
                        "--S3_PART_DEST.$": "$$.Execution.Input['jsonlinppath']",
                        "--src_context": "RT_LL_src_context",
                        "--tgt_context": "RT_LL_tgt_context",
                        "--part_tgt_context": "RT_LL_part_tgt_context"
                      }
                    },
                    "Resource": "arn:aws:states:::glue:startJobRun.sync",
                    "Type": "Task",
                    "Next": "Evaluate Payload"
                  },
                  "Evaluate Payload": {
                    "Parameters": {
                      "FunctionName": "${EvaluatePayloadlambda}",
                      "Payload": {
                        "payload_src.$": "$$.Execution.Input['payload_src']",
                        "prep_jsonpath.$": "$$.Execution.Input['prep_jsonlpath']",
                        "call_source": "Realtime",
                        "inpgroundtruth.$": "$$.Execution.Input['inpgroundtruth']",
                        "opgroundtruth.$": "$$.Execution.Input['opgroundtruth']"
                      }
                    },
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Type": "Task",
                    "Next": "Monitor Payload Present"
                  },
                  "Monitor Payload Present": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$['Payload']['flag']",
                        "NumericEquals": 1,
                        "Next": "MonitorBranch"
                      }
                    ],
                    "Default": "Bypass-No data file to process"
                  },
                  "Bypass-No data file to process": {
                    "Comment": "No Data file to process",
                    "Type": "Pass",
                    "End": true
                  },
                  "MonitorBranch": {
                    "Type": "Parallel",
                    "Branches": [
                      {
                        "StartAt": "Real Time Monitoring(Datadrift)",
                        "States": {
                          "Real Time Monitoring(Datadrift)": {
                            "Resource": "arn:aws:states:::sagemaker:createProcessingJob.sync",
                            "Parameters": {
                              "ProcessingJobName.$": "$$.Execution.Input['MonitorJobName']",
                              "ProcessingInputs": [
                                {
                                  "InputName": "input_1",
                                  "AppManaged": false,
                                  "S3Input": {
                                    "S3Uri.$": "$$.Execution.Input['jsonlinppath']",
                                    "LocalPath.$": "$$.Execution.Input['monitorlocalpath']",
                                    "S3DataType": "S3Prefix",
                                    "S3InputMode": "File",
                                    "S3DataDistributionType": "FullyReplicated",
                                    "S3CompressionType": "None"
                                  }
                                },
                                {
                                  "InputName": "baseline",
                                  "AppManaged": false,
                                  "S3Input": {
                                    "S3Uri": "s3://${ConfigS3Bucket}/${BaselineS3Prefix}/statistics.json",
                                    "LocalPath": "/opt/ml/processing/baseline/stats",
                                    "S3DataType": "S3Prefix",
                                    "S3InputMode": "File",
                                    "S3DataDistributionType": "FullyReplicated",
                                    "S3CompressionType": "None"
                                  }
                                },
                                {
                                  "InputName": "constraints",
                                  "AppManaged": false,
                                  "S3Input": {
                                    "S3Uri": "s3://${ConfigS3Bucket}/${BaselineS3Prefix}/constraints.json",
                                    "LocalPath": "/opt/ml/processing/baseline/constraints",
                                    "S3DataType": "S3Prefix",
                                    "S3InputMode": "File",
                                    "S3DataDistributionType": "FullyReplicated",
                                    "S3CompressionType": "None"
                                  }
                                }
                              ],
                              "ProcessingOutputConfig": {
                                "Outputs": [
                                  {
                                    "OutputName": "result",
                                    "AppManaged": false,
                                    "S3Output": {
                                      "S3Uri.$": "$$.Execution.Input['monitoroppath']",
                                      "LocalPath": "/opt/ml/processing/output",
                                      "S3UploadMode": "EndOfJob"
                                    }
                                  }
                                ]
                              },
                              "AppSpecification": {
                                "ImageUri": "156813124566.dkr.ecr.us-east-1.amazonaws.com/sagemaker-model-monitor-analyzer"
                              },
                              "RoleArn": "${SageMakerIAMRole}",
                              "Environment": {
                                "baseline_constraints": "/opt/ml/processing/baseline/constraints/constraints.json",
                                "baseline_statistics": "/opt/ml/processing/baseline/stats/statistics.json",
                                "dataset_format": "{\"sagemakerCaptureJson\":{\"captureIndexNames\":[\"endpointInput\",\"endpointOutput\"]}}",
                                "dataset_source": "/opt/ml/processing/input/endpoint",
                                "start_time.$": "$$.Execution.Input['start_time']",
                                "end_time.$": "$$.Execution.Input['end_time']",
                                "metric_time.$": "$$.Execution.Input['metric_time']",
                                "output_path": "/opt/ml/processing/output",
                                "publish_cloudwatch_metrics": "Disabled",
                                "sagemaker_endpoint_name": "poc",
                                "sagemaker_monitoring_schedule_name": "poc"
                              },
                              "ProcessingResources": {
                                "ClusterConfig": {
                                  "InstanceCount": 1,
                                  "InstanceType": "${PreProcessingInstanceType}",
                                  "VolumeSizeInGB": 30
                                }
                              },
                              "StoppingCondition": {
                                "MaxRuntimeInSeconds": 3600
                              }
                            },
                            "Type": "Task",
                            "End": true,
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "SageMaker.AmazonSageMakerException"
                                ],
                                "IntervalSeconds": 20,
                                "MaxAttempts": 3,
                                "BackoffRate": 1
                              }
                            ]
                          }
                        }
                      },
                      {
                        "StartAt": "MergeGroundTruth",
                        "States": {
                          "MergeGroundTruth": {
                            "Resource": "arn:aws:states:::sagemaker:createProcessingJob.sync",
                            "Parameters": {
                              "ProcessingJobName.$": "$$.Execution.Input['GTMergeJobName']",
                              "ProcessingInputs": [
                                {
                                  "InputName": "groundtruth",
                                  "AppManaged": false,
                                  "S3Input": {
                                    "S3Uri.$": "$$.Execution.Input['gtinputpath']",
                                    "LocalPath": "/opt/ml/processing/groundtruth/gtinput",
                                    "S3DataType": "S3Prefix",
                                    "S3InputMode": "File",
                                    "S3DataDistributionType": "FullyReplicated",
                                    "S3CompressionType": "None"
                                  }
                                },
                                {
                                  "InputName": "scoringdata",
                                  "AppManaged": false,
                                  "S3Input": {
                                    "S3Uri.$": "$$.Execution.Input['jsonlinppath']",
                                    "LocalPath.$": "$$.Execution.Input['monitorlocalpath']",
                                    "S3DataType": "S3Prefix",
                                    "S3InputMode": "File",
                                    "S3DataDistributionType": "FullyReplicated",
                                    "S3CompressionType": "None"
                                  }
                                }
                              ],
                              "ProcessingOutputConfig": {
                                "Outputs": [
                                  {
                                    "OutputName": "groundtruthmerge",
                                    "AppManaged": false,
                                    "S3Output": {
                                      "S3Uri.$": "$$.Execution.Input['gtmergeoutput']",
                                      "LocalPath": "/opt/ml/processing/output",
                                      "S3UploadMode": "EndOfJob"
                                    }
                                  }
                                ]
                              },
                              "AppSpecification": {
                                "ImageUri": "156813124566.dkr.ecr.us-east-1.amazonaws.com/sagemaker-model-monitor-groundtruth-merger"
                              },
                              "RoleArn": "${SageMakerIAMRole}",
                              "Environment": {
                                "dataset_source": "/opt/ml/processing/input/endpoint",
                                "ground_truth_source": "/opt/ml/processing/groundtruth",
                                "start_time.$": "$$.Execution.Input['start_time']",
                                "end_time.$": "$$.Execution.Input['end_time']",
                                "output_path": "/opt/ml/processing/output"
                              },
                              "ProcessingResources": {
                                "ClusterConfig": {
                                  "InstanceCount": 1,
                                  "InstanceType": "${PreProcessingInstanceType}",
                                  "VolumeSizeInGB": 30
                                }
                              },
                              "StoppingCondition": {
                                "MaxRuntimeInSeconds": 3600
                              }
                            },
                            "Type": "Task",
                            "Next": "Real Time Monitoring(Model Drift)",
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "SageMaker.AmazonSageMakerException"
                                ],
                                "IntervalSeconds": 20,
                                "MaxAttempts": 3,
                                "BackoffRate": 1
                              }
                            ]
                          },
                          "Real Time Monitoring(Model Drift)": {
                            "Resource": "arn:aws:states:::sagemaker:createProcessingJob.sync",
                            "Parameters": {
                              "ProcessingJobName.$": "$$.Execution.Input['MD_MonitorJobName']",
                              "ProcessingInputs": [
                                {
                                  "InputName": "input_1",
                                  "AppManaged": false,
                                  "S3Input": {
                                    "S3Uri.$": "$$.Execution.Input['gtmergeoutput']",
                                    "LocalPath.$": "$$.Execution.Input['monitorlocalpath']",
                                    "S3DataType": "S3Prefix",
                                    "S3InputMode": "File",
                                    "S3DataDistributionType": "FullyReplicated",
                                    "S3CompressionType": "None"
                                  }
                                },
                                {
                                  "InputName": "baseline",
                                  "AppManaged": false,
                                  "S3Input": {
                                    "S3Uri": "s3://wi-cred-datalake-dev-raw/vehicle/usedcars/feature/lr/ModelDrift-BaselineOutput/statistics.json",
                                    "LocalPath": "/opt/ml/processing/baseline/stats",
                                    "S3DataType": "S3Prefix",
                                    "S3InputMode": "File",
                                    "S3DataDistributionType": "FullyReplicated",
                                    "S3CompressionType": "None"
                                  }
                                },
                                {
                                  "InputName": "constraints",
                                  "AppManaged": false,
                                  "S3Input": {
                                    "S3Uri": "s3://wi-cred-datalake-dev-raw/vehicle/usedcars/feature/lr/ModelDrift-BaselineOutput/constraints.json",
                                    "LocalPath": "/opt/ml/processing/baseline/constraints",
                                    "S3DataType": "S3Prefix",
                                    "S3InputMode": "File",
                                    "S3DataDistributionType": "FullyReplicated",
                                    "S3CompressionType": "None"
                                  }
                                }
                              ],
                              "ProcessingOutputConfig": {
                                "Outputs": [
                                  {
                                    "OutputName": "result",
                                    "AppManaged": false,
                                    "S3Output": {
                                      "S3Uri": "s3://wi-cred-datalake-dev-raw/transformed/monitoring/outbound/modeldrift/realtime/ll/2022/06/06/03/",
                                      "LocalPath": "/opt/ml/processing/output",
                                      "S3UploadMode": "EndOfJob"
                                    }
                                  }
                                ]
                              },
                              "AppSpecification": {
                                "ImageUri": "156813124566.dkr.ecr.us-east-1.amazonaws.com/sagemaker-model-monitor-analyzer"
                              },
                              "RoleArn": "${SageMakerIAMRole}",
                              "Environment": {
                                "analysis_type": "MODEL_QUALITY",
                                "baseline_constraints": "/opt/ml/processing/baseline/constraints/constraints.json",
                                "baseline_statistics": "/opt/ml/processing/baseline/stats/statistics.json",
                                "dataset_format": "{\"sagemakerMergeJson\":{\"captureIndexNames\":[\"endpointOutput\"]}}",
                                "dataset_source": "/opt/ml/processing/input/endpoint",
                                "start_time.$": "$$.Execution.Input['start_time']",
                                "end_time.$": "$$.Execution.Input['end_time']",
                                "metric_time.$": "$$.Execution.Input['metric_time']",
                                "output_path": "/opt/ml/processing/output",
                                "publish_cloudwatch_metrics": "Disabled",
                                "problem_type": "Regression",
                                "inference_attribute": "0",
                                "sagemaker_endpoint_name": "poc",
                                "sagemaker_monitoring_schedule_name": "poc"
                              },
                              "ProcessingResources": {
                                "ClusterConfig": {
                                  "InstanceCount": 1,
                                  "InstanceType": "${PreProcessingInstanceType}",
                                  "VolumeSizeInGB": 30
                                }
                              },
                              "StoppingCondition": {
                                "MaxRuntimeInSeconds": 3600
                              }
                            },
                            "Type": "Task",
                            "End": true,
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "SageMaker.AmazonSageMakerException"
                                ],
                                "IntervalSeconds": 20,
                                "MaxAttempts": 3,
                                "BackoffRate": 1
                              }
                            ]
                          }
                        }
                      }
                    ],
                    "Next": "Evaluate Drift"
                  },
                  "Evaluate Drift": {
                    "Parameters": {
                      "FunctionName": "${EvaluateDrift}",
                      "Payload": {
                        "monitoropkey.$": "$$.Execution.Input['monitoropkey']",
                        "notif_sub.$": "$$.Execution.Input['notif_sub']",
                        "modelname.$": "$$.Execution.Input['modelname']",
                        "reportopkey.$": "$$.Execution.Input['reportopkey']",
                        "starttime.$": "$$.Execution.Input['start_time']",
                        "endtime.$": "$$.Execution.Input['end_time']",
                        "inpjsonline.$": "$$.Execution.Input['jsonlinppath']",
                        "outjsonpath.$": "$$.Execution.Input['monitoroppath']",
                        "MonitorJobName.$": "$$.Execution.Input['MonitorJobName']",
                        "baselinestat.$": "$$.Execution.Input['baselinestat']",
                        "baselinecons.$": "$$.Execution.Input['baselinecons']",
                        "infertype.$": "$$.Execution.Input['infertype']",
                        "RTReportPath.$": "$$.Execution.Input['RTReportPath']",
                        "prep_jsonlpath.$": "$$.Execution.Input['prep_jsonlpath']",
                        "payload_src.$": "$$.Execution.Input['payload_src']",
                        "mtrrefpath.$": "$$.Execution.Input['mtrrefpath']"
                      }
                    },
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Type": "Task",
                    "End": true
                  }
                }
              }
            - {GlueJobs3Bookmark: !Ref GlueJobs3Bookmark, EvaluateDrift: !Ref EvaluateDrift,EvaluatePayloadlambda: !Ref EvaluatePayloadlambda,SageMakerIAMRole: !GetAtt SageMakerIAMRole.Arn, Subnet1: !Ref Subnet1, Subnet2: !Ref Subnet2, Subnet3: !Ref Subnet3, SecurityGroup: !Ref SecurityGroup}
    
        Tags:
          -
            Key: "vci:team"
            Value: !Ref TagTeam
          -
            Key: "vci:product"
            Value: !Ref TagProduct
          -
            Key: "tenant"
            Value: !Ref TagTenant
          -
            Key: "env"
            Value: !Ref Environment              
    XGBRTModelMonitorSFN:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        RoleArn: !GetAtt [ SFNIAMRole, Arn ]
        StateMachineName: !Join [ "-", [!Ref AWS::StackName, "XGBRTModelMonitorSFN", !Ref RandomString]] 
        DefinitionString:
          !Sub
            - |-
              {
                  "StartAt": "Data Extract",
                  "States": {
                      "Data Extract": {
                          "Parameters": {
                              "JobName": "${RTdataS3Bookmark}",
                              "Arguments": {
                                  "--S3_SOURCE": "s3://${DataS3Bucket}/${RTGlueS3Source}/xg/",
                                  "--S3_DEST": "s3://${DataS3Bucket}/${RTGlueS3Dest}/xg/",
                                  "--S3_PART_DEST.$": "$$.Execution.Input['jsonlinppath']",
                                  "--src_context":"RT_xg_src_context",
                                  "--tgt_context":"RT_xg_tgt_context",
                                  "--part_tgt_context":"RT_XG_part_tgt_context"

                              }
                          },
                          "Resource": "arn:aws:states:::glue:startJobRun.sync",
                          "Type": "Task",
                          "Next": "Evaluate Payload"
                      },
                      "Evaluate Payload": {
                          "Parameters": {
                              "FunctionName": "${EvaluatePayloadlambda}",
                              "Payload": {
                               "payload_src.$": "$$.Execution.Input['payload_src']",
                               "prep_jsonpath.$":"$$.Execution.Input['prep_jsonlpath']",
                               "call_source": "Realtime",
                               "inpgroundtruth.$": "$$.Execution.Input['inpgroundtruth']",
                               "opgroundtruth.$": "$$.Execution.Input['opgroundtruth']"
                                }
                          },
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Type": "Task",
                          "Next": "Monitor Payload Present"
                      },
                      "Monitor Payload Present": {
                          "Type": "Choice",
                          "Choices": [
                              {
                                  "Variable": "$['Payload']['flag']",
                                  "NumericEquals": 1,
                                  "Next": "Real Time Monitoring"
                              }
                          ],
                          "Default": "Bypass-No data file to process"
                      },
                      "Bypass-No data file to process": {
                          "Comment": "No Data file to process",
                          "Type": "Pass",
                          "End": true
                      },

                      "Real Time Monitoring": {
                          "Resource": "arn:aws:states:::sagemaker:createProcessingJob.sync",
                          "Parameters": {
                              "ProcessingJobName.$": "$$.Execution.Input['MonitorJobName']",
                              "ProcessingInputs": [
                                  {
                                      "InputName": "input_1",
                                      "AppManaged": false,
                                      "S3Input": {
                                          "S3Uri.$": "$$.Execution.Input['jsonlinppath']",
                                          "LocalPath.$": "$$.Execution.Input['monitorlocalpath']",
                                          "S3DataType": "S3Prefix",
                                          "S3InputMode": "File",
                                          "S3DataDistributionType": "FullyReplicated",
                                          "S3CompressionType": "None"
                                      }
                                  },
                                  {
                                      "InputName": "baseline",
                                      "AppManaged": false,
                                      "S3Input": {
                                          "S3Uri":"s3://${ConfigS3Bucket}/${BaselineS3Prefix}/statistics.json",
                                          "LocalPath": "/opt/ml/processing/baseline/stats",
                                          "S3DataType": "S3Prefix",
                                          "S3InputMode": "File",
                                          "S3DataDistributionType": "FullyReplicated",
                                          "S3CompressionType": "None"
                                      }
                                  },
                                  {
                                      "InputName": "constraints",
                                      "AppManaged": false,
                                      "S3Input": {
                                          "S3Uri": "s3://${ConfigS3Bucket}/${BaselineS3Prefix}/constraints.json",
                                          "LocalPath": "/opt/ml/processing/baseline/constraints",
                                          "S3DataType": "S3Prefix",
                                          "S3InputMode": "File",
                                          "S3DataDistributionType": "FullyReplicated",
                                          "S3CompressionType": "None"
                                      }
                                  }
                              ],
                              "ProcessingOutputConfig": {
                                  "Outputs": [
                                      {
                                          "OutputName": "result",
                                          "AppManaged": false,
                                          "S3Output": {
                                              "S3Uri.$":"$$.Execution.Input['monitoroppath']",
                                              "LocalPath": "/opt/ml/processing/output",
                                              "S3UploadMode": "EndOfJob"
                                          }
                                      }
                                  ]
                              },
                              "AppSpecification": {
                                  "ImageUri": "156813124566.dkr.ecr.us-east-1.amazonaws.com/sagemaker-model-monitor-analyzer"
                              },
                              "RoleArn": "${SageMakerIAMRole}",
                              "Environment": {
                                  "baseline_constraints": "/opt/ml/processing/baseline/constraints/constraints.json",
                                  "baseline_statistics": "/opt/ml/processing/baseline/stats/statistics.json",
                                  "dataset_format": "{\"sagemakerCaptureJson\":{\"captureIndexNames\":[\"endpointInput\",\"endpointOutput\"]}}",
                                  "dataset_source": "/opt/ml/processing/input/endpoint",
                                  "start_time.$": "$$.Execution.Input['start_time']",
                                  "end_time.$": "$$.Execution.Input['end_time']",
                                  "metric_time.$": "$$.Execution.Input['metric_time']",
                                  "output_path": "/opt/ml/processing/output",
                                  "publish_cloudwatch_metrics": "Disabled",
                                  "sagemaker_endpoint_name": "poc",
                                  "sagemaker_monitoring_schedule_name": "poc"
                              },
                              "ProcessingResources": {
                                  "ClusterConfig": {
                                      "InstanceCount": 1,
                                      "InstanceType": "${PreProcessingInstanceType}",
                                      "VolumeSizeInGB": 30
                                  }
                              },
                              "StoppingCondition": {
                                  "MaxRuntimeInSeconds": 3600
                              }
                          },
                          "Type": "Task",
                          "Next": "Evaluate Drift",
                          "Retry": [ {
                             "ErrorEquals": [ "SageMaker.AmazonSageMakerException" ],
                             "IntervalSeconds": 20,
                             "MaxAttempts": 3,
                             "BackoffRate": 1
                             } ]
                      },
                      "Evaluate Drift": {
                          "Parameters": {
                              "FunctionName": "${EvaluateDrift}",
                              "Payload": {
                               "monitoropkey.$": "$$.Execution.Input['monitoropkey']",
                               "notif_sub.$": "$$.Execution.Input['notif_sub']",
                               "modelname.$": "$$.Execution.Input['modelname']",
                               "reportopkey.$": "$$.Execution.Input['reportopkey']",
                               "starttime.$": "$$.Execution.Input['start_time']",
                               "endtime.$": "$$.Execution.Input['end_time']",
                               "inpjsonline.$": "$$.Execution.Input['jsonlinppath']",
                               "outjsonpath.$": "$$.Execution.Input['monitoroppath']",
                               "MonitorJobName.$":  "$$.Execution.Input['MonitorJobName']",
                               "baselinestat.$":"$$.Execution.Input['baselinestat']",
                               "baselinecons.$":"$$.Execution.Input['baselinecons']",
                               "infertype.$":"$$.Execution.Input['infertype']",
                               "RTReportPath.$":"$$.Execution.Input['RTReportPath']",
                               "prep_jsonlpath.$" :"$$.Execution.Input['prep_jsonlpath']",
                               "payload_src.$":"$$.Execution.Input['payload_src']",
                               "mtrrefpath.$":"$$.Execution.Input['mtrrefpath']"
                                }
                          },
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Type": "Task",
                          "End": true
                      }
                  }
              }
            - {GlueJobs3Bookmark: !Ref GlueJobs3Bookmark, EvaluateDrift: !Ref EvaluateDrift,EvaluatePayloadlambda: !Ref EvaluatePayloadlambda,SageMakerIAMRole: !GetAtt SageMakerIAMRole.Arn, Subnet1: !Ref Subnet1, Subnet2: !Ref Subnet2, Subnet3: !Ref Subnet3, SecurityGroup: !Ref SecurityGroup}
    
        Tags:
          -
            Key: "vci:team"
            Value: !Ref TagTeam
          -
            Key: "vci:product"
            Value: !Ref TagProduct
          -
            Key: "tenant"
            Value: !Ref TagTenant
          -
            Key: "env"
            Value: !Ref Environment              
    RTdataS3Bookmark:
      Type: "AWS::Glue::Job"
      Properties:
        Name: !Join [ "-", [!Ref AWS::StackName, "RealtimeS3DataExtract",!Ref RandomString]]
        Command:
          Name: "RealtimeS3DataExtract"
          ScriptLocation: !Join [ "/", ["s3:/", !Ref DataS3Bucket, !Ref CodeLocation, !Ref RTPrefixGlueCode]]
          PythonVersion: 3
        DefaultArguments:
          "--job-bookmark-option": "job-bookmark-enable"
          "--job-language": "python"
        Role:  !GetAtt [ GlueRole, Arn ]
        GlueVersion: 3.0
        NumberOfWorkers: 2
        ExecutionProperty:
          "MaxConcurrentRuns": 4
        WorkerType: "G.2X"
        Tags:
          "vci:team": !Ref TagTeam
          "vci:product": !Ref TagProduct
          "tenant": !Ref TagTenant
          "env": !Ref Environment            